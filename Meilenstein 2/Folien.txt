------------------------------------------------
Folie 1: Szenarien
------------------------------------------------

Sehr geehrte Damen und Herren, wir möchten Ihnen heute in einem Grobkonzept unsere Vorstellungen zur Entwicklung des Content-Management-Systems für den Webauftritt der Fernuni Hagen präsentieren.
Zunächst betrachten wir einige Szenarien zur späteren Nutzung des Systems.
Ein mögliches Szenario ist das verfassen eines neuen Artikels: Dabei wird eine Kategorie, in der der neue Artikel erscheinen soll, vom Redakteur gewählt. Er bestimmt ein Template, dass das spätere Aussehen des Artikels festlegt. Der Redakteur gibt Titel und Inhalt sowie ein Zeitfenster ein, in dem der Artikel auf der Webseite angezeigt werden soll und speichert seine Eingaben. Er gibt den Artikel zur Veröffentlichung frei.
Ein weiteres Szenario ist das Bearbeiten eines bestehenden Artikels: Der Redakteur wählt einen Artikel zur Bearbeitung. Er nimmt Änderungen am Inhalt vor, speichert diese und gibt die Änderungen zur Veröffentlichung frei. Eine neue Version des Artikels wird erzeugt.
Als letztes Szenario sehen wir uns das Registrieren eines neuen Redakteurs an: Der Administrator legt ein neues Benutzerkonto für einen Redakteur an. Er vergibt Rechte, die z. B. festlegen, zur Bearbeitung von Artikeln welcher Kategorien der Menustruktur der neue Redakteur autorisiert ist. Der Redakteur loggt sich am System ein, indem er sich mit Benutzername und Passwort authentifiziert.
Auf den Markup-Update-Prozess kommen wir im weiteren Verlauf der Präsentation noch zu sprechen.

(Bild: Anwendungsfalldiagramm von Carsten)

------------------------------------------------
Folie 2: Funktionalitäten
------------------------------------------------

(Bild: hier könnte man einfach das Bild mit den drei Schichten aus der ersten Präsentation nehmen)

Das Frontend  soll die Menüstruktur abbilden sowie ein Durchblättern und Suchen der Artikel ermöglichen.
 
Die Suchfunktionen sollte eine einfache sowie eine erweiterte Suche erlauben, bei der alle Beiträge nach textlicher Übereinstimmung des Suchbegriffes durchsucht werden. 

Die Ausgabe der Suche erfolgt durch auflisten von bis zu 10 Treffern mit der Möglichkeit weitere Treffer anzusehen. 

Treffer werden durch die Artikelüberschrift, Datum, Autor und gegebenfalls Kategorie sowie den erste drei Zeilen des Inhaltes angezeigt.

Die erweiterete Suche solle eine Einschränkung der einfachen Suche nach Unterpunkten wie Autor, Datum, Schlagwörter, usw. ermöglichen.

Das Backend stellt dem eingeloggtem Redakteur ein erweitertes Frontend zur Verfügung welches Änderungen an den vorhandenen Artikeln ermöglicht. Dabei werden zusätzliche Operationen wie
	- das Editieren des Artikel 
	- Zugriff auf ältere Versionen des Artikels
	- Archivieren des Artikels
	- sowie Löschen eines Artikels
unterhalb jeden Artikels angezeigt.
Ferner wird gibt es die Option einen "neuen Artikel zu erstellen".

Das Editieren eines Artikels erlaubt es dem Redakteur die Attribute des Artikels wie z.B. Erscheinungs- und Ablaufsdatum, Schlagwörter und Kategorie zu definieren und seinen Inhalt zu bestimmen.
Durch im Artikeltext eingefügte Platzhalter kann auf interne oder externe Medien, sowie durch Markups auf Daten der Struktur der Fernuni (Lehrgebiete, Mitarbeiter, Telefonnummern, usw.) verwiesen werden.

Abschliessend können Artikel zur Veröffentlichung freigegeben oder zur späteren Weiterbearbeitung abgespeichert werden.

Die Datenbank ist passiv und bildet das ER-Diagramm ab.

Zugriff auf die Datenbank findet mittels SQL-Abfragen seitens des Frontends und des Backends statt.

------------------------------------------------
Folie 3a-3d: Erläuterungen zum ER-Diagramm
------------------------------------------------
Folie 3a
(Bild: ER Diagramm von Carsten (querformat) )
Kommen wir jetzt zu einigen Details des Datenbankmodells wie wir und es momentan vorstellen.

Folie 3b:
(Flashanimation fokus_menu)
Die Tabelle MENUBAUM kann durch Zuweisung der parent_menubaum_id einen gerichteten Graphen darstellen. Dieser Graph kann mehrere Wurzeln haben um z.B. verschiedene Menus darzustellen (Menu an der Seite, oben, rechts etc.). Die Anwendung sollte dafür sorgen, das der Graph azyklisch bleibt.
Einzelne Artikel können über die Tabelle MENUARTIKEL an beliebiger Stelle im Menubaum verlinkt werden. Dabei kann die Reihenfolge in der die Artikel augezählt werden über die Eigenschaft "gewicht" geändert werden.

Folie 3c:
(Flashanimation fokus_artikel)
Zu jedem angelegten Artikel werden alle vorhergehenden Versionen gespeichert, durch Benutzung der artikel_id bei Verlinkungen kann immer die aktuellste Version abgerufen werden. Ist ein Artikel bereits abgelaufen oder noch vor dem Erscheinungsdatum, kann die Anwendung einen entsprechenden Hinweis anzeigen. Um zu gewährleisten, das ältere Versionen, die eventuell Markup enthalten, einfach bearbeitet werden können und trotzdem ein Zugriff auf den Artikel so wie er veröffentlicht wurde möglich ist, wird sowohl der Artikel mit Markup also auch der gerenderte Artikel gespeichert.

Folie 3d:
(Flashanimation fokus_fstruktur)
Ein weiterer Teilbereich der Datenbank bildet die Struktur der FernUni nach, dadurch können Daten wie z.B. Telefonnummern zentral gepflegt werden und müssen nicht manuell in einzelnen Artikeln geändert werden. Die Anwendung merkt sich dazu in der Tabelle MARKUPUPDATE welche Daten in einem Artikel verwendet werden um diese automatisch zu aktualisieren und neu zu versionieren.

------------------------------------------------
Folie 4: Zeitplan
------------------------------------------------

Kommen wir nun zum Zeitplan dieses Projektes. Der Ablauf 
ist in die 4 Phasen:
	- Problemanalyse,
	- Entwicklung,
	- Inbetriebnahme und Test,
	- und zuletzt Nachbesserung und Dokumentation
aufgeteilt. 

In der Problemanalysephase entwickeln wir ein 
detailliertes Konzept der Funktionalitäten des Gesamtsystems.
In enger Zusammenarbeit mit Ihnen erstellen wir genaue
Arbeitsablaufpläne damit wir ein optimales Datenbankkonzept entwickeln können.
Für diese Phase haben wir 50 Stunden vorgesehen.

Der zweite Abschnitt ist die Entwicklung. Hier wird neben 
der eigentlichen Entwicklung der Datenbank auch ein 
Applikationsprototyp zur Simulation des Backends 
entwickelt. So kann später gewährleistet werden, dass unser
Datenbankkonzept Ihren Anforderungen und Wünschen
entspricht. Die Entwicklung hat ein Arbeitsvolumen von
140 Stunden.

In der 3. Phase "Inbetriebnahme und Test" werden wir das 
entwickelte Datenbankkonzept auf dem ORACLE Datenbank-
Server implementieren. Selbstverst‰ndlich werden auch 
Demodaten zur Verfügung gestellt um ausführliche Tests
mit dem Applikationsprototypen durchzuführen, und die
Funktionalität unter Beweis zu stellen. Hierfür haben
wir 60 Stunden veranschlagt.

Die letzte Phase "Nachbesserung und Dokumentation" ist für
Nachbesserungen sowie für die Entwicklung kleinerer 
Änderungswünsche gedacht. 
Damit später eine reibungslose Entwicklung eines 
Anwendungsprogramm gewährleistet ist, wird Ihnen eine
ausführliche Dokumentation zur Verfügung gestellt.

------------------------------------------------
Folie 5: Softwaredesign
------------------------------------------------
Content Management System
Das Anwendungsprogramm ist ein statisches Web-Content-Management-System
(CMS) zur Verwaltung der Website der Fernuni Hagen.
Es könnte als Webanwendung z.B. in PHP programmiert werden.
Die Seiteninhalte (Texte, Links, Medien und Markups) werden als Artikel in der
Backend-Datenbank (Orcale DB der Fernuni Hagen) abgelegt. Bei der
Veröffentlichung eines Artikels wird dieser aus seinen Bestandteilen durch das
Anwendungsprogramm gerendert und, mit einer Versionsnummer versehen, in der
Datenbank abgelegt.
Bei Aufruf der Seite über den Webserver, wird der Artikel dann als statische
Seite ausgeliefert. Dieses Vorgehen garantiert zum einen eine hohe
Auslieferungsgeschwindigkeit der vom Webserver angeforderten Seiten, weil diese
bereits gerendert sind, und zum anderen erleichtert es die Versionierung, indem
bei jeder neuen Veröffentlichung eines Artikels, eine Versionsnummer neu
vergeben wird. So kann auch jederzeit auf eine vorherige Version der Seite
zugegriffen werden.

Einbindung dynamischer Inhalte
Bei den Bestandteilen der Artikel, die in der Datenbank gespeichert sind,
handelt es um einerseits um statische Elemente wie Texte und Links zu anderen
Seiten. Und andererseits um dynamische Elemente, repräsentiert durch sogenannte
Markups, als Platzhalter für Datenbank-Elemente, die erst beim Rendern aus der
Datenbank abgefragt werden. Dies können Namen, Telefonnummern von Mitarbeitern
oder Medien (Bilder, Filme) sein. 
Damit wird einerseits Redundanz vermieden, weil Daten nur an einer Stelle
zentral gespeichert werden und andererseits Konsistenz gewährleistet, weil alle
Artikel auf dieselbe, aktuelle Version eines Datums zugreifen.
Eingebundene Datenbankobjekte bieten außerdem den Vorteil, dass dem Redakteur
Auswahlelemente (z.B. für Namen oder Raumnummern) zur Verfügung gestellt werden
können bei der Editierung der Seite.

Automatische Aktualisierung bei Datenbank-Updates
Bei einem Update auf einen Datensatz in der Datenbank (z.B. die Änderung
einer Telefonnummer), wird durch den Markup-Update-Prozess kontrolliert, ob
Artikel diesen Datensatz als Markup einbinden und gegebenenfalls werden alle
betroffenen Seiten der Webpräsenz neu gerendert und, versehen mit einer neuen
Versionsnummer, veröffentlicht.

Rechteverwaltung
Die Anwendung verlangt beim Start eine Anmeldung (Login mit Username,
Passwort). Die Rechteverwaltung kennt zwei Rollen (Administrator und
Redakteur). Dem Redakteur können Bereiche der Menüstruktur zugewiesen 
werden. In diesen Bereichen (z.B. einem Fachbereich) steht ihm dann die
redaktionelle Funktionalität (Erstellen und Bearbeiten von Seiten) zur
Verfügung.

Workflow
Der Publishing-Prozess ist als Workflow realisiert:

1. Ein Artikel wird neu erstellt oder ein bestehender Artikel wird aus der
   Datenbank zur Bearbeitung geladen. 
2. Anschließend kann der Artikel editiert werden. 
3. Zur Begutachtung des Ergebnisses wird die Seite gerendert und steht dann
   für die Vorschau zur Verfügung. Anschließend kann der Artikel entweder weiter
   bearbeitet (zurück zu 2.) oder aber 
4. veröffentlicht werden. 
5. Bei der Veröffentlichung wird der Artikel automatisch versioniert. 

Eine möglicherweise wünschenswerte Funktionalität wäre eine zwingende
Beteiligung mehrerer Personen an der Veröffentlichung eines Artikels.

Seitenvorlagen
Der Aufbau der Seiten (Header, Footer, Navigation, Menüs) und das Design
(Schriften, Farben, Logos) wird in Seitenvorlagen gespeichert. Die Anwendung
stellt verschiedene Seitenvorlagen bei der Erstellung neuer Artikel zur
Verfügung. Das vereinfacht dem Redakteur das Erstellen eines Artikels
und gewährleistet ein durchgehendes Erscheinungsbild des Webauftritts.

Content-Life-Cycle-Management
Das Content-Life-Cycle-Management sorgt dafür, dass Artikeln, denen eine
Gültigkeitsdauer mit Erscheinungsdatum und Ablaufdatum zugewiesen wurde, mit
ebendieser zeitlichen Beschränkung veröffentlicht werden. Dabei kann es sich um 
aktuelle News, die Ankündigung von Terminen, Abgabe von Online-Dokumenten, etc.
handeln. Betreffende Artikel werden nach Ablaufdatum automatisch von der
Website entfernt und archiviert. Und ebenso können Artikel, die ab einem
bestimmten Datum veröffentlicht werden sollen, zur Veröffentlichung hinterlegen
werden. Das Content-Life-Cycle-Management rendert und veröffentlicht die
Artikel dann zum betreffenden Zeitpunkt.

------------------------------------------------
Folie 6:  Machbarkeitsabschaetzung
------------------------------------------------
(Bild: Machbarkeitsabschaetzung.png )
Über den momentan geplanten Funktionsumfang hinaus sind auch noch weitere Funktionen denkbar.
Dazu zählen z.B. ein automatisches Update der Struktur der FernUni in der CMS Datenbank von einer externen Datenquelle wie etwa einer schon vorhandenen Datenbank.
Auch komplexes Markup um z.B. alle Kurse einer Fakultät die "3D" im Namen haben aufzulisten und entsprechende Artikel zu verlinken ist denkbar.

Diese Funktionen sind momentan nicht Teil des Entwurfs und würden den Umfang des Projekts erheblich steigern.

Für das automatische Update müssen dazu entsprechende Importfilter erstellt werden die die externen Daten in die CMS interne Struktur importieren. Gleichzeitig müssen Artikel die auf diese Daten zugreifen neu gerendert und versioniert werden.
Eine Abschätzung des Arbeitsuafwandes ist ohne Informationen über die externen Datenquellen nicht möglich.

Komplexes Markup erschwert die Aktualisierung bei geänderten Strukturdaten. Für sehr flexibles Markup muss u.U. auf ein System zurückgegriffen werden bei dem alle Artikel neu gerendert werden und mit der aktuellen Version verglichen werden um Änderungen festzustellen. Das neu-rendern aller statt nur der betroffenen Artikel bedeutet einen weitaus höheren Rechenaufwand.

Soweit unser Grobkonzpt. Das Team von Group 4 Management Solutuions bedankt sich für Ihre Aufmerksamkeit und hofft, dass
das Konzept Ihren Vorstellungen entspricht. Für weitere Fragen stehen wir Ihnen gerne am nächsten Besprechungstermin zur 
Verfügung.
